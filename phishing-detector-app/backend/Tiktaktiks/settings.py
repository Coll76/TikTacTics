"""
Django settings for Tiktaktiks project.

Generated by 'django-admin startproject' using Django 2.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '#f2bd=s-ad)*ec!!1iqbu-zz39rtgi27ig=ynh)tb17zp%*k-v'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = [
        'localhost',            # Local development
        '127.0.0.1',           # Local development
        'fca4-216-128-0-64.ngrok-free.app', #Ngrok URL
        'tiktactics.onrender.com'
        ]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'corsheaders', #new
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',  # Required by allauth

    #3rd-party apps
    'allauth',#new
    'allauth.account', #new
    'allauth.socialaccount',#new
    'dj_rest_auth',#new
    #'rest_framework_swagger', # new
    'rest_framework',
    'rest_framework.authtoken',
    'dj_rest_auth.registration', #new
    'celery',
    'channels',
    'rest_framework_simplejwt', #new

    #local
    'PhishingSolution',
    'debug_toolbar', #new
    'rest_framework_simplejwt.token_blacklist', #new
]


#new
# Define the ASGI application for Channels
ASGI_APPLICATION = 'Tiktaktiks.asgi.application'



#new
# Set up Redis as the channel layer backend for handling WebSockets
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels.layers.InMemoryChannelLayer', #NEW
    },
}



#new

REST_FRAMEWORK = {
        'DEFAULT_PERMISSION_CLASSES': [
            'rest_framework.permissions.IsAuthenticated', #new
            ],

        'DEFAULT_AUTHENTICATION_CLASSES': [
            #'rest_framework.authentication.SessionAuthentication',
            #'rest_framework.authentication.TokenAuthentication',
            'rest_framework_simplejwt.authentication.JWTAuthentication', #new
            ],

        'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    ],

    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',
        'rest_framework.parsers.FormParser',
        'rest_framework.parsers.MultiPartParser',
    ],

    #'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.openapi.AutoSchema',
}

#new
# JWT settings
from datetime import timedelta

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=5),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'AUTH_HEADER_TYPES': ('Bearer',),
}


#new
REST_AUTH_REGISTER_SERIALIZERS = {
    'REGISTER_SERIALIZER': 'PhishingSolution.serializers.UserRegistrationSerializer',
    }


REST_AUTH_SERIALIZERS = {
    'LOGIN_SERIALIZER': 'PhishingSolution.serializers.CustomLoginSerializer',
}


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware', #new
    'django.middleware.common.CommonMiddleware', #new
    'allauth.account.middleware.AccountMiddleware', #new
    'debug_toolbar.middleware.DebugToolbarMiddleware',
]

ROOT_URLCONF = 'Tiktaktiks.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'Tiktaktiks.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'tiktactic',
        'USER': 'tiktactic_user',
        'PASSWORD': 'fyxaLPTrYkKGYxatwVjwKHYfD8fPTGuA',
        'HOST': 'dpg-cs56bb5umphs73aoihtg-a.oregon-postgres.render.com',
        'PORT': '5432',
    }
}

INTERNAL_IPS = [
    "127.0.0.1",
]



# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'

#EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend' # new
SITE_ID = 1 # new
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_USERNAME_REQUIRED = True
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = 'tiktacticsapp@gmail.com'
EMAIL_HOST_PASSWORD = '#@*titac'
ACCOUNT_EMAIL_VERIFICATION = 'mandatory'

AUTHENTICATION_BACKENDS = [
    'PhishingSolution.backends.EmailBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
    'django.contrib.auth.backends.ModelBackend',
]


CELERY_BROKER_URL = 'amqp://localhost'
CELERY_RESULT_BACKEND = 'amqp://localhost'
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'




# Google OAuth settings

GOOGLE_CLIENT_ID = '344719165870-kb3l6s01e3s7c3v4rfllpamffa05jf8p.apps.googleusercontent.com'
GOOGLE_CLIENT_SECRET = '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'
GOOGLE_REDIRECT_URI = 'http://127.0.0.1:8000/api/v1/oauth-redirect/'
GOOGLE_SCOPE = 'https://www.googleapis.com/auth/gmail.readonly'



# Swagger API Configuration
"""
SWAGGER_SETTINGS = {
    'SECURITY_DEFINITIONS': {
        'Bearer': {
            'type': 'apiKey',
            'name': 'Authorization',
            'in': 'header',
        }
    },
    'USE_SESSION_AUTH': False,  # If you want to disable session authentication in Swagger UI
    'JSON_EDITOR': True,  # To enable the JSON editor in Swagger UI
}

REDOC_SETTINGS = {
    'LAZY_RENDERING': True,  # Enables lazy rendering for faster load times
}
"""

AUTH_USER_MODEL = 'PhishingSolution.CustomUser'


#new

CORS_ALLOWED_ORIGINS = [
    "https://your-mobile-app-domain.com",
    "http://localhost:3000",  # or any other origin
    ]
